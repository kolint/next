// @ts-nocheck
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,15],$V2=[1,13],$V3=[1,14],$V4=[6,13,17,19,39],$V5=[1,33],$V6=[1,51],$V7=[21,35],$V8=[1,63],$V9=[2,37],$Va=[1,60],$Vb=[1,61],$Vc=[27,43,45,47],$Vd=[1,72],$Ve=[1,80],$Vf=[21,37],$Vg=[27,43,45,47,48],$Vh=[1,95],$Vi=[37,55],$Vj=[1,103],$Vk=[1,104],$Vl=[21,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"document":3,"xmlpi":4,"nodes":5,"EOF":6,"node":7,"textNode":8,"comment":9,"element":10,"elementEnd":11,"doctype":12,"TEXT":13,"XMLPISTART":14,"XMLPITEXT":15,"XMLPIEND":16,"DOCSTART":17,"DOCEND":18,"CSTag":19,"commentTexts":20,"CETag":21,"IMPORT":22,"importStmnt":23,"VIEW_REF":24,"typeRef":25,"CONTEXT_NAME":26,"Ident":27,"CONTEXT":28,"DOT":29,"xValue":30,"KOLINT_ENABLE":31,"diagIds":32,"KOLINT_DISABLE":33,"bindingText":34,"commentText":35,"bindingTextEnd":36,"COMMA":37,"DIAGKEY":38,"<":39,"tagName":40,"bindingAttribs":41,"possiblyClosed":42,">":43,"COLON":44,"/":45,"attrib":46,"bindAttr":47,"EQ":48,"attribValue":49,"attribName":50,"importSymbols":51,"FROM":52,"LBRACE":53,"namedImports":54,"RBRACE":55,"STAR":56,"AS":57,"namedImport":58,"TYPEOF":59,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"TEXT",14:"XMLPISTART",15:"XMLPITEXT",16:"XMLPIEND",17:"DOCSTART",18:"DOCEND",19:"CSTag",21:"CETag",22:"IMPORT",24:"VIEW_REF",26:"CONTEXT_NAME",27:"Ident",28:"CONTEXT",29:"DOT",31:"KOLINT_ENABLE",33:"KOLINT_DISABLE",34:"bindingText",35:"commentText",36:"bindingTextEnd",37:"COMMA",38:"DIAGKEY",39:"<",43:">",44:"COLON",45:"/",47:"bindAttr",48:"EQ",52:"FROM",53:"LBRACE",55:"RBRACE",56:"STAR",57:"AS",59:"TYPEOF"},
productions_: [0,[3,3],[3,2],[3,1],[5,2],[5,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,1],[4,3],[12,3],[9,3],[9,2],[9,4],[9,4],[9,4],[9,6],[9,4],[9,4],[9,4],[9,3],[9,3],[9,4],[9,3],[9,4],[20,2],[20,1],[32,3],[32,1],[10,5],[10,4],[40,3],[40,1],[42,1],[42,0],[11,4],[41,2],[41,1],[46,3],[46,3],[46,1],[50,3],[50,1],[49,1],[49,1],[23,3],[51,1],[51,5],[51,3],[51,3],[54,3],[54,1],[58,3],[58,1],[25,1],[25,2],[30,3],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 return $$[$0-1] 
break;
case 3:
 return [] 
break;
case 4:
 if ($$[$0]) $$[$0-1].push($$[$0]); this.$=$$[$0-1] 
break;
case 5: case 31:
 this.$ = $$[$0] ? [$$[$0]] : [] 
break;
case 11: case 12: case 13:
 this.$ = null 
break;
case 14: case 15:
 this.$=null 
break;
case 16:
 this.$ = $$[$0-1] 
break;
case 17:
 this.$ = yy.createChildContext(this._$, $$[$0-1]) 
break;
case 18:
 this.$ = yy.createNamedContext(this._$, yy.ident($$[$0-1], _$[$0-1])) 
break;
case 19:
 this.$ = yy.createContextAssignment(this._$, yy.ident($$[$0-3], _$[$0-3]), $$[$0-1]) 
break;
case 20:
 this.$ = yy.createContextAssignment(this._$, yy.ident($$[$0-1], _$[$0-1])) 
break;
case 21:
 this.$ = yy.createDiagNode(this._$, $$[$0-1], true) 
break;
case 22:
 this.$ = yy.createDiagNode(this._$, $$[$0-1], false) 
break;
case 23:
 this.$ = yy.createDiagNode(this._$, [], true) 
break;
case 24:
 this.$ = yy.createDiagNode(this._$, [], false) 
break;
case 25:
 this.$ = yy.createStartNode(this._$, 'comment-binding'); this.$.bindings = [yy.createBindingData(_$[$0-1], $$[$0-1])]; this.$.loc = _$[$0-1] 
break;
case 26: case 27:
 this.$ = yy.createEndNode(this._$, 'comment-binding') 
break;
case 30: case 53:
 this.$ = $$[$0-2].concat($$[$0]) 
break;
case 32:

      this.$ = $$[$0-1] ? yy.createEmptyNode(this._$, $$[$0-3]) : yy.createStartNode(this._$, $$[$0-3])
      if ($$[$0-2].length)
        this.$.bindings = $$[$0-2]
    
break;
case 33:
 this.$ = $$[$0-1] ? yy.createEmptyNode(this._$, $$[$0-2]) : yy.createStartNode(this._$, $$[$0-2]) 
break;
case 36:
 this.$=true 
break;
case 37:
 this.$=false 
break;
case 38:
 this.$ = yy.createEndNode(this._$, $$[$0-1]) 
break;
case 39:
 this.$ = $$[$0-1].concat($$[$0]) 
break;
case 40:
 this.$ = $$[$0] ? [].concat($$[$0]) : [] 
break;
case 41:
 this.$=yy.createBindingData(_$[$0], $$[$0]) 
break;
case 42: case 43:
 this.$=[] 
break;
case 48:
 this.$ = yy.createImportNode(this._$, $$[$0-2], yy.ident($$[$0], _$[$0])) 
break;
case 49:

      this.$ = [{ name: yy.ident('default', _$[$0]), alias: yy.ident($$[$0], _$[$0]) }]
    
break;
case 50:

      // import a, { b, c as d, ... } from ...
      this.$ = $$[$0-1].concat({ name: yy.ident('default', _$[$0-4]), alias: yy.ident($$[$0-4], _$[$0-4]) })
    
break;
case 51:

      // import {a, b, c as d, default as e, ... } from ...
      this.$ = $$[$0-1]
    
break;
case 52:

      // Namespace import (import * as a from ...)
      this.$ = [{ name: yy.ident('*', _$[$0-2]), alias: yy.ident($$[$0], _$[$0]) }]
    
break;
case 54:
 this.$ = [$$[$0]] 
break;
case 55:
 this.$ = { name: yy.ident($$[$0-2], _$[$0-2]), alias: yy.ident($$[$0], _$[$0]) } 
break;
case 56:
 this.$ = { name: yy.ident($$[$0], _$[$0]), alias: yy.ident($$[$0], _$[$0]) } 
break;
case 57:
 this.$ = yy.createTypeRef(this._$, yy.ident($$[$0], _$[$0]), true) 
break;
case 58:
 this.$ = yy.createTypeRef(this._$, yy.ident($$[$0], _$[$0]), false) 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:6,8:7,9:8,10:9,11:10,12:11,13:$V0,14:[1,5],17:$V1,19:$V2,39:$V3},{1:[3]},{5:16,7:6,8:7,9:8,10:9,11:10,12:11,13:$V0,17:$V1,19:$V2,39:$V3},{6:[1,17],7:18,8:7,9:8,10:9,11:10,12:11,13:$V0,17:$V1,19:$V2,39:$V3},{1:[2,3]},{15:[1,19]},o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),o($V4,[2,8]),o($V4,[2,9]),o($V4,[2,10]),o($V4,[2,11]),{20:20,21:[1,21],22:[1,22],24:[1,23],26:[1,24],28:[1,25],31:[1,26],33:[1,27],34:[1,28],35:[1,30],36:[1,29]},{27:$V5,40:31,45:[1,32]},{13:[1,34]},{6:[1,35],7:18,8:7,9:8,10:9,11:10,12:11,13:$V0,17:$V1,19:$V2,39:$V3},{1:[2,2]},o($V4,[2,4]),{16:[1,36]},{21:[1,37],35:[1,38]},o($V4,[2,15]),{23:39,27:[1,41],51:40,53:[1,42],56:[1,43]},{25:44,27:[1,45],59:[1,46]},{27:[1,47]},{27:[1,48]},{21:[1,50],32:49,38:$V6},{21:[1,53],32:52,38:$V6},{35:[1,54]},{21:[1,55],35:[1,56]},o($V7,[2,29]),{27:$V8,41:57,42:58,43:$V9,45:$Va,46:59,47:$Vb,50:62},{27:$V5,40:64},o($Vc,[2,35],{44:[1,65]}),{18:[1,66]},{1:[2,1]},o([13,17,19,39],[2,12]),o($V4,[2,14]),o($V7,[2,28]),{21:[1,67]},{52:[1,68]},{37:[1,69],52:[2,49]},{27:$Vd,54:70,58:71},{57:[1,73]},{21:[1,74]},{21:[2,57]},{27:[1,75]},{21:[1,76]},{21:[1,78],29:[1,77]},{21:[1,79],37:$Ve},o($V4,[2,23]),o($Vf,[2,31]),{21:[1,81],37:$Ve},o($V4,[2,24]),{21:[1,82]},o($V4,[2,26]),{21:[1,83]},{27:$V8,42:84,43:$V9,45:$Va,46:85,47:$Vb,50:62},{43:[1,86]},o($Vc,[2,40]),{43:[2,36]},{48:[1,87]},o($Vc,[2,43],{48:[1,88]}),o($Vg,[2,45],{44:[1,89]}),{43:[1,90]},{27:[1,91]},o($V4,[2,13]),o($V4,[2,16]),{13:[1,92]},{53:[1,93]},{37:$Vh,55:[1,94]},o($Vi,[2,54]),o($Vi,[2,56],{57:[1,96]}),{27:[1,97]},o($V4,[2,17]),{21:[2,58]},o($V4,[2,18]),{27:[1,99],30:98},o($V4,[2,20]),o($V4,[2,21]),{38:[1,100]},o($V4,[2,22]),o($V4,[2,25]),o($V4,[2,27]),{43:[1,101]},o($Vc,[2,39]),o($V4,[2,33]),{13:$Vj,27:$Vk,49:102},{13:$Vj,27:$Vk,49:105},{27:[1,106]},o($V4,[2,38]),o($Vc,[2,34]),{21:[2,48]},{27:$Vd,54:107,58:71},{52:[2,51]},{27:$Vd,58:108},{27:[1,109]},{52:[2,52]},{21:[1,110],29:[1,111]},o($Vl,[2,60]),o($Vf,[2,30]),o($V4,[2,32]),o($Vc,[2,41]),o($Vc,[2,46]),o($Vc,[2,47]),o($Vc,[2,42]),o($Vg,[2,44]),{37:$Vh,55:[1,112]},o($Vi,[2,53]),o($Vi,[2,55]),o($V4,[2,19]),{27:[1,113]},{52:[2,50]},o($Vl,[2,59])],
defaultActions: {4:[2,3],17:[2,2],35:[2,1],45:[2,57],60:[2,36],75:[2,58],92:[2,48],94:[2,51],97:[2,52],112:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin('xmlpi'); return 14
break;
case 2:this.begin('doctype'); return 17
break;
case 3:this.begin('comment'); return 19
break;
case 4:this.begin('tag'); return 39
break;
case 5:return 13
break;
case 6:this.popState(); return 43
break;
case 7:return 45
break;
case 8:return 48
break;
case 9:yy_.yytext = yy_.yytext.slice(1,-1); ++yy_.yylloc.range[0]; --yy_.yylloc.range[1]; return 13
break;
case 10:yy_.yytext = yy_.yytext.slice(1,-1); ++yy_.yylloc.range[0]; --yy_.yylloc.range[1]; return 13
break;
case 11:return yy.bindingNames.includes(yy_.yytext) ? 'bindAttr' : 'Ident'
break;
case 12:return 53
break;
case 13:return 55
break;
case 14:return 37
break;
case 15:return 44
break;
case 16:return 22
break;
case 17:return 59
break;
case 18:return 29
break;
case 19:return 57
break;
case 20:return 56
break;
case 21:return 52
break;
case 22:this.popState(); this.popState(); return 21
break;
case 23:return 27
break;
case 24:return 13
break;
case 25:this.begin('import'); return 22
break;
case 26:this.begin('kodirective'); return 24
break;
case 27:this.begin('kodirective'); return 26
break;
case 28:this.begin('kodirective'); return 28
break;
case 29:return 34
break;
case 30:return 36
break;
case 31:return 36
break;
case 32:this.begin('lintSwitch'); return 31
break;
case 33:this.begin('lintSwitch'); return 33
break;
case 34:this.popState(); return 21
break;
case 35:return 35
break;
case 36:return 38
break;
case 37:return 15
break;
case 38:this.popState(); return 16
break;
case 39:this.popState(); return 18
break;
case 40:return 13
break;
case 41:return 6
break;
case 42:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:<\?xml\b)/,/^(?:<!DOCTYPE\b)/,/^(?:<!--)/,/^(?:<)/,/^(?:[^<]+)/,/^(?:>)/,/^(?:\/)/,/^(?:=)/,/^(?:("[^\"]+"))/,/^(?:('[^\']+'))/,/^(?:([_$a-zA-Z\xA0-\uFFFF][_$\-a-zA-Z0-9\xA0-\uFFFF]*))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:import\b)/,/^(?:typeof\b)/,/^(?:\.)/,/^(?:as\b)/,/^(?:\*)/,/^(?:from\b)/,/^(?:-->)/,/^(?:([_$a-zA-Z\xA0-\uFFFF][_$\-a-zA-Z0-9\xA0-\uFFFF]*))/,/^(?:([^\s>]+))/,/^(?:ko-import\b)/,/^(?:ko-viewmodel\b)/,/^(?:ko-context-name\b)/,/^(?:ko-context\b)/,/^(?:ko\s)/,/^(?:\/ko\s)/,/^(?:(\/))/,/^(?:kolint-enable\b)/,/^(?:kolint-disable\b)/,/^(?:-->)/,/^(?:([\s\S]+?(?=(-->))))/,/^(?:([_$a-zA-Z\xA0-\uFFFF][_$\-a-zA-Z0-9\xA0-\uFFFF]*))/,/^(?:(.+?(?=\?)))/,/^(?:\?>)/,/^(?:>)/,/^(?:([^\s>]+))/,/^(?:$)/,/^(?:.)/],
conditions: {"tag":{"rules":[0,6,7,8,9,10,11,15,24],"inclusive":false},"comment":{"rules":[0,25,26,27,28,29,30,31,32,33,34,35],"inclusive":false},"doctype":{"rules":[0,39,40],"inclusive":false},"import":{"rules":[0,9,10,12,13,14,15,16,19,20,21,22,23,24],"inclusive":false},"kodirective":{"rules":[0,17,18,22,23],"inclusive":false},"xmlpi":{"rules":[0,37,38],"inclusive":false},"lintSwitch":{"rules":[0,14,22,36],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}